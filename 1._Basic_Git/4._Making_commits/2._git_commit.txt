Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-11-07T06:58:50+05:30

====== 2. git commit ======
Created Saturday 07 November 2020

=== Commit ===
* Saving change(s) to the repo is called a commit.
* 'git commit' is used to save the staged files into the repo. It is similar to taking a snapshot of the project.
* Note: You files to be commited need to be in the staging area.
* After running ''git commit'', an editor opens up, in edit mode. A short 'commit message' needs to be provided. So just write the message starting on the first line, save and quit. The commit has been made.
* To avoid using an editor, use the **-m** option with the 'git commit'. Provide the message in double quotes as the parameter for **-m**.
{{{code: lang="sh" linenumbers="True"
git commit # opens an editor - a bit time consuming
git commit -m "messgae here" # one liner
}}}


=== Tips about committing ===
1. They must be done regularly
2. Every commit must have a single focus - number of lines or number of files changed is irrelevant. You can change as many files as you want, as long as changes are for one goal only.
3. Conversely, a commit shouldn't include unrelated changes - This way, if it turns out that one change had a bug and needs to be undone, you don't have to undo the other unrelated change too.
Note: Keep the goal of each commit as atomic as possible.

=== Tips for commit messages ===
1. Keep the message short, i.e <=50 chars
2. Explain what the commit does(not how or why).
3. Try to not use 'and', as commits should be atomic.
4. Don't use complete sentences like "This commit will...", just write the content.
5. Don't use a period
6. Write in an imperative mood - 'add button' is better than 'added a button'
7. Use a separate body on a new line if why or how is to be explained
	{{./pasted_image.png}}
8. BE CONSISTENT

=== Skip staging(for already files in repo) ===
* Syntax: ''git commit -a'' or ''git commit -a -m "message here"''.
* Gotchas:
	* This works for tracked files only. A file is "tracked" by Git if it has been commited in the past.
	* You still need to stage untracked files using ''git add''. Untracked files - Files that have been commited.
	This is the reason why ''git commit -a'' is not equivalent to ''git add -A; git commit'', except for tracked files.
