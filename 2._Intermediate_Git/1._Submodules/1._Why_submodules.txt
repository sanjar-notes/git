Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-02-20T04:25:43+05:30

====== 1. Why submodules ======
Created Saturday 20 February 2021

=== My motivation(s) for learning submodules ===

== Situation 1 ==
* I am learning app development in Android and I take notes in [[https://zim-wiki.org/|zim-wiki]], which I track with Git. Additionally, I wish keep the app projects(repos themselves) in the notes directory. This amounts to nesting the app repos inside the notebook repo. 
* **Question**: Is Git okay with this? Short answer - no, Git is not okay with nesting.
* I have realized that doing so results in an ambiguous situation for Git:
1. Should it track everything, including the app repo's ''.git'' folder?
2. Should it track the app folder's content but ignore the app's repo?
3. Should it completely ignore all repos except the top-level repo?
4. Should it completely ignore all nested repos(and their contents) but save an acknowledgement of their existence, for example the URL for the nested repo.

== Situation 2 ==
* I am making a webpapp and need to use external libraries, which must be kept in the project folder. During the course of development, the project repo updates and the library(s) may also update. 
* **Question**: How should Git treat a library(which is just a repo somewhere inside the project repo)? 
* It's an ambiguous situation for Git, just like Situation1:
1. Should it track the the library just like other files(which we create) of the project, i.e monitor changes if the library gets updated.
2. Should it ignore the library being a repo and just track it's files.
3. Should it completely ignore the library, or just store a label that the folder exists.

=== The problem(s) with nesting ===
* Git cannot decide, because the ambiguous scenarios are potential use-cases the developer might need.
* Using nested repos mixes external code with the unique project files, which is undersirable(couplingüôÑÔ∏è).
* The library is a project itself and should be kept separate.
* If you keep them together, you'll likely have a hard time updating the library code. This also makes the top-level repo incoherent(history wise), as the library repo is updated.
* By default, Git displays warnings if you try to nest repos.

=== Goal ===
We need a comfortable and resilient way to work with nested repos.

=== More situations ===
1. If you need to strictly track your external dependencies.
2. When an external component or subproject is changing too fast or upcoming changes will break the API: I wish to lock the code to a specific commit for your own safety.
3. When you have a component that isn‚Äôt updated very often and you want to track it as a vendor dependency.
4. When you are delegating a piece of the project to a third party and you want to integrate their work at a specific time or release. Again this works when updates are not too frequent.

=== Solution ===
Git solves this problem using a feature called '**Submodules**'.
